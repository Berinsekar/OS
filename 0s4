#include <stdio.h>

#define MAX_PARTITIONS 6

void firstFit(int partitions[], int numPartitions, int processes[], int numProcesses) {
    int allocation[numProcesses];
    int i, j;
    for (i = 0; i < numProcesses; i++) {
        allocation[i] = -1;
    }
    for (i = 0; i < numProcesses; i++) {
        for (j = 0; j < numPartitions; j++) {
        
            if (partitions[j] >= processes[i]) {
                
                allocation[i] = j;

                // Reduce the size of the partition
                partitions[j] -= processes[i];

                break;  // Stop searching for a partition
            }
        }
    }

    printf("\nProcess No.\tProcess Size\tPartition No.\n");
    for (i = 0; i < numProcesses; i++) {
        printf("%d\t\t%d KB\t\t", i + 1, processes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int partitions[] = {300, 600, 350, 200, 750, 125};
    int processes[] = {115, 500, 358, 200, 375};
    int numPartitions = sizeof(partitions) / sizeof(partitions[0]);
    int numProcesses = sizeof(processes) / sizeof(processes[0]);

    printf("Memory Partitions:\n");
    for (int i = 0; i < numPartitions; i++) {
        printf("%d KB\t", partitions[i]);
    }

    firstFit(partitions, numPartitions, processes, numProcesses);

    return 0;
}
